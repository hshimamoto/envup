#!/bin/bash
# vim: set sw=2 sts=2:

curlopt=-k

checktools()
{
  need=""
  which curl
  if [ $? -ne 0 ]; then
    need="$need curl ca-certificates"
  fi
  which git
  if [ $? -ne 0 ]; then
    need="$need git"
  fi
  which vim
  if [ $? -ne 0 ]; then
    need="$need vim"
  fi
  which tar
  if [ $? -ne 0 ]; then
    need="$need tar"
  fi
  which xz
  if [ $? -ne 0 ]; then
    need="$need xz"
  fi
  if [ "$need" != "" ]; then
    echo "Install$need"
    exit 1
  fi
}

binlink()
{
  src=$1
  cmd=$2
  ln -s $src $HOME/bin/$cmd
}

fzfinstall()
{
  if [ -d ~/.fzf ]; then
    return
  fi
  echo "Install fzf"
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  yes | ~/.fzf/install
}

binariesinstall()
{
  echo "Install binaries"
  if [ -d ~/.envup.binaries ]; then
    return
  fi
  git clone --depth 1 https://github.com/hshimamoto/envup.binaries.git ~/.envup.binaries
  ~/.envup.binaries/inst.sh
}

vimrc()
{
  if [ -e .vimrc ]; then
    return
  fi
  cat > .vimrc <<_VIMRC_
set nobackup
set noswapfile
set modeline

" hack desert256 color
if (&term =~ 'xterm' && &t_Co == 256)
  set t_ut=
  autocmd colorscheme * highlight LineNr ctermfg=7 ctermbg=17
  autocmd colorscheme * highlight CursorLineNr ctermfg=228 ctermbg=17
  set number relativenumber
endif

colorscheme desert256
_VIMRC_
  # vim-plug?
  if [ -e .vim/autoload/plug.vim ]; then
    cat >> .vimrc <<_VIMRC_VIM_PLUG_
"================ BEGIN vim-plug
" vim-plug
call plug#begin('~/.vim/plugged')
" list plugins
" TAG VIM_PLUG_MARK
call plug#end()
"================ END vim-plug
_VIMRC_VIM_PLUG_
  fi
}

vimplug_lightline()
{
  # Plug 'itchyny/lightline.vim'
  grep -q lightline.vim .vimrc
  if [ $? -eq 0 ]; then
    return
  fi
  mark="\" TAG VIM_PLUG_MARK"
  cp -a .vimrc .vimrc.old
  sed -e "s/$mark.*\$/Plug 'itchyny\/lightline.vim'\n$mark/" .vimrc.old > .vimrc
  vim +PlugInstall +qa
  cat >> .vimrc <<_VIMRC_VIM_PLUG_LIGHTLINE_

" for lightline
set laststatus=2
_VIMRC_VIM_PLUG_LIGHTLINE_
}

vimplug()
{
  mkdir -p .vim/autoload
  if [ -e .vim/autoload/plug.vim ]; then
    return
  fi
  # download
  echo "getting vim-plug"
  curl $curlopt -L -o .vim/autoload/plug.vim \
    'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
}

vimcolors()
{
  mkdir -p .vim/colors
  if [ -e .vim/colors/desert256.vim ]; then
    return
  fi
  # download
  echo "getting desert256.vim"
  # try github first
  curl $curlopt -L -o .vim/colors/desert256.vim \
    "https://raw.githubusercontent.com/brafales/vim-desert256/master/colors/desert256.vim"
  if [ -e .vim/colors/desert256.vim ]; then
    return
  fi
  curl $curlopt -L -o .vim/colors/desert256.vim \
    'http://www.vim.org/scripts/download_script.php?src_id=4055'
}

vimfiles()
{
  echo "vim related files"
  vimcolors
  vimplug
  vimrc
  vimplug_lightline
}

gitconfig()
{
  if [ -e .gitconfig ]; then
    return
  fi
  echo "generate gitconfig"
  if [ -n "$http_proxy" ]; then
    cat >> .gitconfig <<_GITCONFIG_
[http]
	proxy = $http_proxy
[https]
	proxy = $http_proxy
_GITCONFIG_
  fi
  cat >> .gitconfig <<_GITCONFIG_
[core]
	editor = vim
[user]
	name = $name
	email = $user@users.noreply.github.com
_GITCONFIG_
}

sshconfig()
{
  if [ ! -d .ssh ]; then
    mkdir .ssh
    chmod 700 .ssh
  fi
  cd .ssh
  mkdir hosts 2>/dev/null
  mkdir keys 2>/dev/null
  cd ..
}

screenrc()
{
  if [ -e .screenrc ]; then
    return
  fi
  echo "generate .screenrc"
  cat > .screenrc <<_SCREENRC_
startup_message off
caption always "%{= bk} %?%F%{b kr}%? %n: %t %{= bk}"
hardstatus alwayslastline "%{= Gk} %L=%-w%45L>%n %t %+w %-24<%=[%l] %C%a "
termcapinfo xterm* ti@:te@
altscreen on
shell -${SHELL}
_SCREENRC_
}

checkproxy()
{
  if [ -n "$http_proxy" ]; then
    return
  fi
  if [ -n "$https_proxy" ]; then
    export http_proxy=$https_proxy
    return
  fi
  if [ -e .curlrc ]; then
    http_proxy=`grep 'proxy' .curlrc | awk -F'=' '{print $2}'`
    export http_proxy
  fi
}

makedirs()
{
  if [ ! -d bin ]; then
    mkdir bin
  fi
  if [ ! -d .logs ]; then
    mkdir .logs
  fi
}

cronfiles()
{
  if [ ! -d zz_cron ]; then
    mkdir zz_cron
  fi
  if [ ! -e zz_cron/crontab ]; then
    echo "generate crontab template"
    cat > zz_cron/crontab <<_CRONTAB_
@reboot /bin/bash ~/zz_cron/jobs.sh boot
*/10 * * * * /bin/bash ~/zz_cron/jobs.sh 10m
0 */8 * * * /bin/bash ~/zz_cron/jobs.sh 8h
_CRONTAB_
  fi
  if [ ! -e zz_cron/jobs.sh ]; then
    echo "generate jobs script"
    cat > zz_cron/jobs.sh <<'_JOBS_'
#!/bin/bash
cd $(dirname $0)
export PATH=$PATH:~/bin
# jobs
_JOBS_
    chmod +x zz_cron/jobs.sh
  fi
}

echo "envup start"

cd $HOME

name='Hiroshi Shimamoto'
user=`whoami`
if [ "$user" != "hshimamoto" ]; then
  name=$user
fi

checktools
checkproxy
makedirs
vimfiles
gitconfig
sshconfig
screenrc
fzfinstall
binariesinstall
cronfiles
